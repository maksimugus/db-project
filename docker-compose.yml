name: "db-project"

networks:
    app_tier:

services:
  etcd1: &etcd
      image: patroni
      networks: [ app_tier ]
      env_file: patroni/etcd.env
      container_name: etcd1
      hostname: etcd1
      command: etcd --name etcd1 --initial-advertise-peer-urls http://etcd1:2380

  etcd2:
      <<: *etcd
      container_name: etcd2
      hostname: etcd2
      command: etcd --name etcd2 --initial-advertise-peer-urls http://etcd2:2380

  haproxy:
      image: patroni
      networks: [ app_tier ]
      env_file: 
        - .env
        - patroni/patroni.env
      hostname: haproxy
      container_name: haproxy
      volumes:
        - ./init:/docker-entrypoint-initdb.d
        - ./migrations:/migrations
        - ./queries:/queries
        - ./backups:/backups
      ports:
          - "5000:5000"
          - "5001:5001"
      command: haproxy
      environment: &haproxy_env
          ETCDCTL_ENDPOINTS: http://etcd1:2379,http://etcd2:2379
          PATRONI_ETCD3_HOSTS: "'etcd1:2379','etcd2:2379'"
          PATRONI_SCOPE: app_tier

  patroni1:
      image: patroni
      networks: [ app_tier ]
      env_file: patroni/patroni.env
      hostname: patroni1
      container_name: patroni1
      environment:
          <<: *haproxy_env
          PATRONI_NAME: patroni1

  patroni2:
      image: patroni
      networks: [ app_tier ]
      env_file: patroni/patroni.env
      hostname: patroni2
      container_name: patroni2
      environment:
          <<: *haproxy_env
          PATRONI_NAME: patroni2

  flyway:
    image: flyway/flyway
    networks: [ app_tier ]
    container_name: db-migrations
    volumes:
      - ./migrations:/flyway/sql
    depends_on:
      - haproxy
    restart: on-failure
    command: >
      -validateMigrationNaming="true"
      -url=jdbc:postgresql://${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
      -user=${POSTGRES_USER} 
      -password=${POSTGRES_PASSWORD}
      -target=${VERSION:-latest}
      migrate

  python:
    image: python:3.11-alpine
    networks: [ app_tier ]
    container_name: data-generator
    restart: on-failure
    depends_on:
      flyway:
        condition: service_completed_successfully
    env_file: .env
    volumes:
      - ./data_generation:/tmp/source
    working_dir: /tmp/source
    command: ["sh", "-c", "pip install -r requirements.txt && python main.py"]

  prometheus:
    image: prom/prometheus
    networks: [ app_tier ]
    container_name: prometheus
    ports:
      - 9090:9090
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro

  pg-exporter:
    image: prometheuscommunity/postgres-exporter
    networks: [ app_tier ]
    container_name: pg-exporter
    ports:
      - 9187:9187
    environment:
      DATA_SOURCE_URI: "${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}?sslmode=disable"
      DATA_SOURCE_USER: ${POSTGRES_USER}
      DATA_SOURCE_PASS: ${POSTGRES_PASSWORD}
    links:
      - haproxy
      - prometheus

  grafana:
    image: grafana/grafana
    networks: [ app_tier ]
    container_name: grafana
    ports:
      - 3000:3000